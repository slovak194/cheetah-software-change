/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class qp_controller_data_t implements lcm.lcm.LCMEncodable
{
    public double exit_flag;
    public double nWSR;
    public double cpu_time_microseconds;
    public double xOpt[];
    public double p_des[];
    public double p_act[];
    public double v_des[];
    public double v_act[];
    public double O_err[];
    public double omegab_des[];
    public double omegab_act[];
    public double lbA[];
    public double ubA[];
    public double C_times_f[];
    public double b_control[];
    public double b_control_Opt[];
    public double active;
    public double pfeet_des[];
    public double pfeet_act[];
 
    public qp_controller_data_t()
    {
        xOpt = new double[12];
        p_des = new double[3];
        p_act = new double[3];
        v_des = new double[3];
        v_act = new double[3];
        O_err = new double[3];
        omegab_des = new double[3];
        omegab_act = new double[3];
        lbA = new double[20];
        ubA = new double[20];
        C_times_f = new double[20];
        b_control = new double[6];
        b_control_Opt = new double[6];
        pfeet_des = new double[12];
        pfeet_act = new double[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa885737200dec04eL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.qp_controller_data_t.class))
            return 0L;
 
        classes.add(lcmtypes.qp_controller_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.exit_flag); 
 
        outs.writeDouble(this.nWSR); 
 
        outs.writeDouble(this.cpu_time_microseconds); 
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.xOpt[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.p_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.p_act[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.v_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.v_act[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.O_err[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.omegab_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.omegab_act[a]); 
        }
 
        for (int a = 0; a < 20; a++) {
            outs.writeDouble(this.lbA[a]); 
        }
 
        for (int a = 0; a < 20; a++) {
            outs.writeDouble(this.ubA[a]); 
        }
 
        for (int a = 0; a < 20; a++) {
            outs.writeDouble(this.C_times_f[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.b_control[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.b_control_Opt[a]); 
        }
 
        outs.writeDouble(this.active); 
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.pfeet_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.pfeet_act[a]); 
        }
 
    }
 
    public qp_controller_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public qp_controller_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.qp_controller_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.qp_controller_data_t o = new lcmtypes.qp_controller_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.exit_flag = ins.readDouble();
 
        this.nWSR = ins.readDouble();
 
        this.cpu_time_microseconds = ins.readDouble();
 
        this.xOpt = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.xOpt[a] = ins.readDouble();
        }
 
        this.p_des = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.p_des[a] = ins.readDouble();
        }
 
        this.p_act = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.p_act[a] = ins.readDouble();
        }
 
        this.v_des = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.v_des[a] = ins.readDouble();
        }
 
        this.v_act = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.v_act[a] = ins.readDouble();
        }
 
        this.O_err = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.O_err[a] = ins.readDouble();
        }
 
        this.omegab_des = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegab_des[a] = ins.readDouble();
        }
 
        this.omegab_act = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegab_act[a] = ins.readDouble();
        }
 
        this.lbA = new double[(int) 20];
        for (int a = 0; a < 20; a++) {
            this.lbA[a] = ins.readDouble();
        }
 
        this.ubA = new double[(int) 20];
        for (int a = 0; a < 20; a++) {
            this.ubA[a] = ins.readDouble();
        }
 
        this.C_times_f = new double[(int) 20];
        for (int a = 0; a < 20; a++) {
            this.C_times_f[a] = ins.readDouble();
        }
 
        this.b_control = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.b_control[a] = ins.readDouble();
        }
 
        this.b_control_Opt = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.b_control_Opt[a] = ins.readDouble();
        }
 
        this.active = ins.readDouble();
 
        this.pfeet_des = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.pfeet_des[a] = ins.readDouble();
        }
 
        this.pfeet_act = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.pfeet_act[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.qp_controller_data_t copy()
    {
        lcmtypes.qp_controller_data_t outobj = new lcmtypes.qp_controller_data_t();
        outobj.exit_flag = this.exit_flag;
 
        outobj.nWSR = this.nWSR;
 
        outobj.cpu_time_microseconds = this.cpu_time_microseconds;
 
        outobj.xOpt = new double[(int) 12];
        System.arraycopy(this.xOpt, 0, outobj.xOpt, 0, 12); 
        outobj.p_des = new double[(int) 3];
        System.arraycopy(this.p_des, 0, outobj.p_des, 0, 3); 
        outobj.p_act = new double[(int) 3];
        System.arraycopy(this.p_act, 0, outobj.p_act, 0, 3); 
        outobj.v_des = new double[(int) 3];
        System.arraycopy(this.v_des, 0, outobj.v_des, 0, 3); 
        outobj.v_act = new double[(int) 3];
        System.arraycopy(this.v_act, 0, outobj.v_act, 0, 3); 
        outobj.O_err = new double[(int) 3];
        System.arraycopy(this.O_err, 0, outobj.O_err, 0, 3); 
        outobj.omegab_des = new double[(int) 3];
        System.arraycopy(this.omegab_des, 0, outobj.omegab_des, 0, 3); 
        outobj.omegab_act = new double[(int) 3];
        System.arraycopy(this.omegab_act, 0, outobj.omegab_act, 0, 3); 
        outobj.lbA = new double[(int) 20];
        System.arraycopy(this.lbA, 0, outobj.lbA, 0, 20); 
        outobj.ubA = new double[(int) 20];
        System.arraycopy(this.ubA, 0, outobj.ubA, 0, 20); 
        outobj.C_times_f = new double[(int) 20];
        System.arraycopy(this.C_times_f, 0, outobj.C_times_f, 0, 20); 
        outobj.b_control = new double[(int) 6];
        System.arraycopy(this.b_control, 0, outobj.b_control, 0, 6); 
        outobj.b_control_Opt = new double[(int) 6];
        System.arraycopy(this.b_control_Opt, 0, outobj.b_control_Opt, 0, 6); 
        outobj.active = this.active;
 
        outobj.pfeet_des = new double[(int) 12];
        System.arraycopy(this.pfeet_des, 0, outobj.pfeet_des, 0, 12); 
        outobj.pfeet_act = new double[(int) 12];
        System.arraycopy(this.pfeet_act, 0, outobj.pfeet_act, 0, 12); 
        return outobj;
    }
 
}

