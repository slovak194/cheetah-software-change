/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ecat_command_t implements lcm.lcm.LCMEncodable
{
    public float x_des[];
    public float y_des[];
    public float z_des[];
    public float dx_des[];
    public float dy_des[];
    public float dz_des[];
    public float kpx[];
    public float kpy[];
    public float kpz[];
    public float kdx[];
    public float kdy[];
    public float kdz[];
    public int enable[];
    public int zero_joints[];
    public float fx_ff[];
    public float fy_ff[];
    public float fz_ff[];
    public float tau_abad_ff[];
    public float tau_hip_ff[];
    public float tau_knee_ff[];
    public float abad_zero_angle[];
    public float hip_zero_angle[];
    public float knee_zero_angle[];
    public float q_des_abad[];
    public float q_des_hip[];
    public float q_des_knee[];
    public float qd_des_abad[];
    public float qd_des_hip[];
    public float qd_des_knee[];
    public float kp_joint_abad[];
    public float kp_joint_hip[];
    public float kp_joint_knee[];
    public float kd_joint_abad[];
    public float kd_joint_hip[];
    public float kd_joint_knee[];
    public float max_torque[];
 
    public ecat_command_t()
    {
        x_des = new float[4];
        y_des = new float[4];
        z_des = new float[4];
        dx_des = new float[4];
        dy_des = new float[4];
        dz_des = new float[4];
        kpx = new float[4];
        kpy = new float[4];
        kpz = new float[4];
        kdx = new float[4];
        kdy = new float[4];
        kdz = new float[4];
        enable = new int[4];
        zero_joints = new int[4];
        fx_ff = new float[4];
        fy_ff = new float[4];
        fz_ff = new float[4];
        tau_abad_ff = new float[4];
        tau_hip_ff = new float[4];
        tau_knee_ff = new float[4];
        abad_zero_angle = new float[4];
        hip_zero_angle = new float[4];
        knee_zero_angle = new float[4];
        q_des_abad = new float[4];
        q_des_hip = new float[4];
        q_des_knee = new float[4];
        qd_des_abad = new float[4];
        qd_des_hip = new float[4];
        qd_des_knee = new float[4];
        kp_joint_abad = new float[4];
        kp_joint_hip = new float[4];
        kp_joint_knee = new float[4];
        kd_joint_abad = new float[4];
        kd_joint_hip = new float[4];
        kd_joint_knee = new float[4];
        max_torque = new float[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xad03831ee9458f34L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.ecat_command_t.class))
            return 0L;
 
        classes.add(lcmtypes.ecat_command_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.x_des[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.y_des[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.z_des[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dx_des[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dy_des[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dz_des[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kpx[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kpy[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kpz[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kdx[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kdy[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kdz[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.enable[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.zero_joints[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.fx_ff[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.fy_ff[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.fz_ff[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_abad_ff[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_hip_ff[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_knee_ff[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.abad_zero_angle[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.hip_zero_angle[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.knee_zero_angle[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.q_des_abad[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.q_des_hip[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.q_des_knee[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.qd_des_abad[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.qd_des_hip[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.qd_des_knee[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kp_joint_abad[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kp_joint_hip[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kp_joint_knee[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kd_joint_abad[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kd_joint_hip[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.kd_joint_knee[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.max_torque[a]); 
        }
 
    }
 
    public ecat_command_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ecat_command_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.ecat_command_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.ecat_command_t o = new lcmtypes.ecat_command_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.x_des = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.x_des[a] = ins.readFloat();
        }
 
        this.y_des = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.y_des[a] = ins.readFloat();
        }
 
        this.z_des = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.z_des[a] = ins.readFloat();
        }
 
        this.dx_des = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dx_des[a] = ins.readFloat();
        }
 
        this.dy_des = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dy_des[a] = ins.readFloat();
        }
 
        this.dz_des = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dz_des[a] = ins.readFloat();
        }
 
        this.kpx = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kpx[a] = ins.readFloat();
        }
 
        this.kpy = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kpy[a] = ins.readFloat();
        }
 
        this.kpz = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kpz[a] = ins.readFloat();
        }
 
        this.kdx = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kdx[a] = ins.readFloat();
        }
 
        this.kdy = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kdy[a] = ins.readFloat();
        }
 
        this.kdz = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kdz[a] = ins.readFloat();
        }
 
        this.enable = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.enable[a] = ins.readInt();
        }
 
        this.zero_joints = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.zero_joints[a] = ins.readInt();
        }
 
        this.fx_ff = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.fx_ff[a] = ins.readFloat();
        }
 
        this.fy_ff = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.fy_ff[a] = ins.readFloat();
        }
 
        this.fz_ff = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.fz_ff[a] = ins.readFloat();
        }
 
        this.tau_abad_ff = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_abad_ff[a] = ins.readFloat();
        }
 
        this.tau_hip_ff = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_hip_ff[a] = ins.readFloat();
        }
 
        this.tau_knee_ff = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_knee_ff[a] = ins.readFloat();
        }
 
        this.abad_zero_angle = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.abad_zero_angle[a] = ins.readFloat();
        }
 
        this.hip_zero_angle = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.hip_zero_angle[a] = ins.readFloat();
        }
 
        this.knee_zero_angle = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.knee_zero_angle[a] = ins.readFloat();
        }
 
        this.q_des_abad = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.q_des_abad[a] = ins.readFloat();
        }
 
        this.q_des_hip = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.q_des_hip[a] = ins.readFloat();
        }
 
        this.q_des_knee = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.q_des_knee[a] = ins.readFloat();
        }
 
        this.qd_des_abad = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.qd_des_abad[a] = ins.readFloat();
        }
 
        this.qd_des_hip = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.qd_des_hip[a] = ins.readFloat();
        }
 
        this.qd_des_knee = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.qd_des_knee[a] = ins.readFloat();
        }
 
        this.kp_joint_abad = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kp_joint_abad[a] = ins.readFloat();
        }
 
        this.kp_joint_hip = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kp_joint_hip[a] = ins.readFloat();
        }
 
        this.kp_joint_knee = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kp_joint_knee[a] = ins.readFloat();
        }
 
        this.kd_joint_abad = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kd_joint_abad[a] = ins.readFloat();
        }
 
        this.kd_joint_hip = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kd_joint_hip[a] = ins.readFloat();
        }
 
        this.kd_joint_knee = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.kd_joint_knee[a] = ins.readFloat();
        }
 
        this.max_torque = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.max_torque[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.ecat_command_t copy()
    {
        lcmtypes.ecat_command_t outobj = new lcmtypes.ecat_command_t();
        outobj.x_des = new float[(int) 4];
        System.arraycopy(this.x_des, 0, outobj.x_des, 0, 4); 
        outobj.y_des = new float[(int) 4];
        System.arraycopy(this.y_des, 0, outobj.y_des, 0, 4); 
        outobj.z_des = new float[(int) 4];
        System.arraycopy(this.z_des, 0, outobj.z_des, 0, 4); 
        outobj.dx_des = new float[(int) 4];
        System.arraycopy(this.dx_des, 0, outobj.dx_des, 0, 4); 
        outobj.dy_des = new float[(int) 4];
        System.arraycopy(this.dy_des, 0, outobj.dy_des, 0, 4); 
        outobj.dz_des = new float[(int) 4];
        System.arraycopy(this.dz_des, 0, outobj.dz_des, 0, 4); 
        outobj.kpx = new float[(int) 4];
        System.arraycopy(this.kpx, 0, outobj.kpx, 0, 4); 
        outobj.kpy = new float[(int) 4];
        System.arraycopy(this.kpy, 0, outobj.kpy, 0, 4); 
        outobj.kpz = new float[(int) 4];
        System.arraycopy(this.kpz, 0, outobj.kpz, 0, 4); 
        outobj.kdx = new float[(int) 4];
        System.arraycopy(this.kdx, 0, outobj.kdx, 0, 4); 
        outobj.kdy = new float[(int) 4];
        System.arraycopy(this.kdy, 0, outobj.kdy, 0, 4); 
        outobj.kdz = new float[(int) 4];
        System.arraycopy(this.kdz, 0, outobj.kdz, 0, 4); 
        outobj.enable = new int[(int) 4];
        System.arraycopy(this.enable, 0, outobj.enable, 0, 4); 
        outobj.zero_joints = new int[(int) 4];
        System.arraycopy(this.zero_joints, 0, outobj.zero_joints, 0, 4); 
        outobj.fx_ff = new float[(int) 4];
        System.arraycopy(this.fx_ff, 0, outobj.fx_ff, 0, 4); 
        outobj.fy_ff = new float[(int) 4];
        System.arraycopy(this.fy_ff, 0, outobj.fy_ff, 0, 4); 
        outobj.fz_ff = new float[(int) 4];
        System.arraycopy(this.fz_ff, 0, outobj.fz_ff, 0, 4); 
        outobj.tau_abad_ff = new float[(int) 4];
        System.arraycopy(this.tau_abad_ff, 0, outobj.tau_abad_ff, 0, 4); 
        outobj.tau_hip_ff = new float[(int) 4];
        System.arraycopy(this.tau_hip_ff, 0, outobj.tau_hip_ff, 0, 4); 
        outobj.tau_knee_ff = new float[(int) 4];
        System.arraycopy(this.tau_knee_ff, 0, outobj.tau_knee_ff, 0, 4); 
        outobj.abad_zero_angle = new float[(int) 4];
        System.arraycopy(this.abad_zero_angle, 0, outobj.abad_zero_angle, 0, 4); 
        outobj.hip_zero_angle = new float[(int) 4];
        System.arraycopy(this.hip_zero_angle, 0, outobj.hip_zero_angle, 0, 4); 
        outobj.knee_zero_angle = new float[(int) 4];
        System.arraycopy(this.knee_zero_angle, 0, outobj.knee_zero_angle, 0, 4); 
        outobj.q_des_abad = new float[(int) 4];
        System.arraycopy(this.q_des_abad, 0, outobj.q_des_abad, 0, 4); 
        outobj.q_des_hip = new float[(int) 4];
        System.arraycopy(this.q_des_hip, 0, outobj.q_des_hip, 0, 4); 
        outobj.q_des_knee = new float[(int) 4];
        System.arraycopy(this.q_des_knee, 0, outobj.q_des_knee, 0, 4); 
        outobj.qd_des_abad = new float[(int) 4];
        System.arraycopy(this.qd_des_abad, 0, outobj.qd_des_abad, 0, 4); 
        outobj.qd_des_hip = new float[(int) 4];
        System.arraycopy(this.qd_des_hip, 0, outobj.qd_des_hip, 0, 4); 
        outobj.qd_des_knee = new float[(int) 4];
        System.arraycopy(this.qd_des_knee, 0, outobj.qd_des_knee, 0, 4); 
        outobj.kp_joint_abad = new float[(int) 4];
        System.arraycopy(this.kp_joint_abad, 0, outobj.kp_joint_abad, 0, 4); 
        outobj.kp_joint_hip = new float[(int) 4];
        System.arraycopy(this.kp_joint_hip, 0, outobj.kp_joint_hip, 0, 4); 
        outobj.kp_joint_knee = new float[(int) 4];
        System.arraycopy(this.kp_joint_knee, 0, outobj.kp_joint_knee, 0, 4); 
        outobj.kd_joint_abad = new float[(int) 4];
        System.arraycopy(this.kd_joint_abad, 0, outobj.kd_joint_abad, 0, 4); 
        outobj.kd_joint_hip = new float[(int) 4];
        System.arraycopy(this.kd_joint_hip, 0, outobj.kd_joint_hip, 0, 4); 
        outobj.kd_joint_knee = new float[(int) 4];
        System.arraycopy(this.kd_joint_knee, 0, outobj.kd_joint_knee, 0, 4); 
        outobj.max_torque = new float[(int) 4];
        System.arraycopy(this.max_torque, 0, outobj.max_torque, 0, 4); 
        return outobj;
    }
 
}

