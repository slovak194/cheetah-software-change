/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gamepad_lcmt implements lcm.lcm.LCMEncodable
{
    public int leftBumper;
    public int rightBumper;
    public int leftTriggerButton;
    public int rightTriggerButton;
    public int back;
    public int start;
    public int a;
    public int b;
    public int x;
    public int y;
    public int leftStickButton;
    public int rightStickButton;
    public float leftTriggerAnalog;
    public float rightTriggerAnalog;
    public float leftStickAnalog[];
    public float rightStickAnalog[];
 
    public gamepad_lcmt()
    {
        leftStickAnalog = new float[2];
        rightStickAnalog = new float[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x37c71cc8957b05cfL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.gamepad_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.gamepad_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.leftBumper); 
 
        outs.writeInt(this.rightBumper); 
 
        outs.writeInt(this.leftTriggerButton); 
 
        outs.writeInt(this.rightTriggerButton); 
 
        outs.writeInt(this.back); 
 
        outs.writeInt(this.start); 
 
        outs.writeInt(this.a); 
 
        outs.writeInt(this.b); 
 
        outs.writeInt(this.x); 
 
        outs.writeInt(this.y); 
 
        outs.writeInt(this.leftStickButton); 
 
        outs.writeInt(this.rightStickButton); 
 
        outs.writeFloat(this.leftTriggerAnalog); 
 
        outs.writeFloat(this.rightTriggerAnalog); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.leftStickAnalog[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.rightStickAnalog[a]); 
        }
 
    }
 
    public gamepad_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gamepad_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.gamepad_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.gamepad_lcmt o = new lcmtypes.gamepad_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.leftBumper = ins.readInt();
 
        this.rightBumper = ins.readInt();
 
        this.leftTriggerButton = ins.readInt();
 
        this.rightTriggerButton = ins.readInt();
 
        this.back = ins.readInt();
 
        this.start = ins.readInt();
 
        this.a = ins.readInt();
 
        this.b = ins.readInt();
 
        this.x = ins.readInt();
 
        this.y = ins.readInt();
 
        this.leftStickButton = ins.readInt();
 
        this.rightStickButton = ins.readInt();
 
        this.leftTriggerAnalog = ins.readFloat();
 
        this.rightTriggerAnalog = ins.readFloat();
 
        this.leftStickAnalog = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.leftStickAnalog[a] = ins.readFloat();
        }
 
        this.rightStickAnalog = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.rightStickAnalog[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.gamepad_lcmt copy()
    {
        lcmtypes.gamepad_lcmt outobj = new lcmtypes.gamepad_lcmt();
        outobj.leftBumper = this.leftBumper;
 
        outobj.rightBumper = this.rightBumper;
 
        outobj.leftTriggerButton = this.leftTriggerButton;
 
        outobj.rightTriggerButton = this.rightTriggerButton;
 
        outobj.back = this.back;
 
        outobj.start = this.start;
 
        outobj.a = this.a;
 
        outobj.b = this.b;
 
        outobj.x = this.x;
 
        outobj.y = this.y;
 
        outobj.leftStickButton = this.leftStickButton;
 
        outobj.rightStickButton = this.rightStickButton;
 
        outobj.leftTriggerAnalog = this.leftTriggerAnalog;
 
        outobj.rightTriggerAnalog = this.rightTriggerAnalog;
 
        outobj.leftStickAnalog = new float[(int) 2];
        System.arraycopy(this.leftStickAnalog, 0, outobj.leftStickAnalog, 0, 2); 
        outobj.rightStickAnalog = new float[(int) 2];
        System.arraycopy(this.rightStickAnalog, 0, outobj.rightStickAnalog, 0, 2); 
        return outobj;
    }
 
}

