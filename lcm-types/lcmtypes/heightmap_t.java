/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class heightmap_t implements lcm.lcm.LCMEncodable
{
    public double map[][];
    public double robot_loc[];
 
    public heightmap_t()
    {
        map = new double[100][100];
        robot_loc = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9dc86e2cda9acee7L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.heightmap_t.class))
            return 0L;
 
        classes.add(lcmtypes.heightmap_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 100; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeDouble(this.map[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.robot_loc[a]); 
        }
 
    }
 
    public heightmap_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public heightmap_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.heightmap_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.heightmap_t o = new lcmtypes.heightmap_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.map = new double[(int) 100][(int) 100];
        for (int a = 0; a < 100; a++) {
            for (int b = 0; b < 100; b++) {
                this.map[a][b] = ins.readDouble();
            }
        }
 
        this.robot_loc = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.robot_loc[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.heightmap_t copy()
    {
        lcmtypes.heightmap_t outobj = new lcmtypes.heightmap_t();
        outobj.map = new double[(int) 100][(int) 100];
        for (int a = 0; a < 100; a++) {
            System.arraycopy(this.map[a], 0, outobj.map[a], 0, 100);        }
 
        outobj.robot_loc = new double[(int) 3];
        System.arraycopy(this.robot_loc, 0, outobj.robot_loc, 0, 3); 
        return outobj;
    }
 
}

