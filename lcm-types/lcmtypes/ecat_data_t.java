/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ecat_data_t implements lcm.lcm.LCMEncodable
{
    public float x[];
    public float y[];
    public float z[];
    public float dx[];
    public float dy[];
    public float dz[];
    public float fx[];
    public float fy[];
    public float fz[];
    public float q_abad[];
    public float q_hip[];
    public float q_knee[];
    public float dq_abad[];
    public float dq_hip[];
    public float dq_knee[];
    public float tau_abad[];
    public float tau_hip[];
    public float tau_knee[];
    public float tau_des_abad[];
    public float tau_des_hip[];
    public float tau_des_knee[];
    public short loop_count_ti[];
    public short ethercat_count_ti[];
    public short microtime_ti[];
 
    public ecat_data_t()
    {
        x = new float[4];
        y = new float[4];
        z = new float[4];
        dx = new float[4];
        dy = new float[4];
        dz = new float[4];
        fx = new float[4];
        fy = new float[4];
        fz = new float[4];
        q_abad = new float[4];
        q_hip = new float[4];
        q_knee = new float[4];
        dq_abad = new float[4];
        dq_hip = new float[4];
        dq_knee = new float[4];
        tau_abad = new float[4];
        tau_hip = new float[4];
        tau_knee = new float[4];
        tau_des_abad = new float[4];
        tau_des_hip = new float[4];
        tau_des_knee = new float[4];
        loop_count_ti = new short[4];
        ethercat_count_ti = new short[4];
        microtime_ti = new short[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2dd37f039d5cbafcL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.ecat_data_t.class))
            return 0L;
 
        classes.add(lcmtypes.ecat_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.x[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.y[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.z[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dx[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dy[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dz[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.fx[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.fy[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.fz[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.q_abad[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.q_hip[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.q_knee[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dq_abad[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dq_hip[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.dq_knee[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_abad[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_hip[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_knee[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_des_abad[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_des_hip[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.tau_des_knee[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeShort(this.loop_count_ti[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeShort(this.ethercat_count_ti[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeShort(this.microtime_ti[a]); 
        }
 
    }
 
    public ecat_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ecat_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.ecat_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.ecat_data_t o = new lcmtypes.ecat_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.x = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.x[a] = ins.readFloat();
        }
 
        this.y = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.y[a] = ins.readFloat();
        }
 
        this.z = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.z[a] = ins.readFloat();
        }
 
        this.dx = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dx[a] = ins.readFloat();
        }
 
        this.dy = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dy[a] = ins.readFloat();
        }
 
        this.dz = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dz[a] = ins.readFloat();
        }
 
        this.fx = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.fx[a] = ins.readFloat();
        }
 
        this.fy = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.fy[a] = ins.readFloat();
        }
 
        this.fz = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.fz[a] = ins.readFloat();
        }
 
        this.q_abad = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.q_abad[a] = ins.readFloat();
        }
 
        this.q_hip = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.q_hip[a] = ins.readFloat();
        }
 
        this.q_knee = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.q_knee[a] = ins.readFloat();
        }
 
        this.dq_abad = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dq_abad[a] = ins.readFloat();
        }
 
        this.dq_hip = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dq_hip[a] = ins.readFloat();
        }
 
        this.dq_knee = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dq_knee[a] = ins.readFloat();
        }
 
        this.tau_abad = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_abad[a] = ins.readFloat();
        }
 
        this.tau_hip = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_hip[a] = ins.readFloat();
        }
 
        this.tau_knee = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_knee[a] = ins.readFloat();
        }
 
        this.tau_des_abad = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_des_abad[a] = ins.readFloat();
        }
 
        this.tau_des_hip = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_des_hip[a] = ins.readFloat();
        }
 
        this.tau_des_knee = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.tau_des_knee[a] = ins.readFloat();
        }
 
        this.loop_count_ti = new short[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.loop_count_ti[a] = ins.readShort();
        }
 
        this.ethercat_count_ti = new short[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.ethercat_count_ti[a] = ins.readShort();
        }
 
        this.microtime_ti = new short[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.microtime_ti[a] = ins.readShort();
        }
 
    }
 
    public lcmtypes.ecat_data_t copy()
    {
        lcmtypes.ecat_data_t outobj = new lcmtypes.ecat_data_t();
        outobj.x = new float[(int) 4];
        System.arraycopy(this.x, 0, outobj.x, 0, 4); 
        outobj.y = new float[(int) 4];
        System.arraycopy(this.y, 0, outobj.y, 0, 4); 
        outobj.z = new float[(int) 4];
        System.arraycopy(this.z, 0, outobj.z, 0, 4); 
        outobj.dx = new float[(int) 4];
        System.arraycopy(this.dx, 0, outobj.dx, 0, 4); 
        outobj.dy = new float[(int) 4];
        System.arraycopy(this.dy, 0, outobj.dy, 0, 4); 
        outobj.dz = new float[(int) 4];
        System.arraycopy(this.dz, 0, outobj.dz, 0, 4); 
        outobj.fx = new float[(int) 4];
        System.arraycopy(this.fx, 0, outobj.fx, 0, 4); 
        outobj.fy = new float[(int) 4];
        System.arraycopy(this.fy, 0, outobj.fy, 0, 4); 
        outobj.fz = new float[(int) 4];
        System.arraycopy(this.fz, 0, outobj.fz, 0, 4); 
        outobj.q_abad = new float[(int) 4];
        System.arraycopy(this.q_abad, 0, outobj.q_abad, 0, 4); 
        outobj.q_hip = new float[(int) 4];
        System.arraycopy(this.q_hip, 0, outobj.q_hip, 0, 4); 
        outobj.q_knee = new float[(int) 4];
        System.arraycopy(this.q_knee, 0, outobj.q_knee, 0, 4); 
        outobj.dq_abad = new float[(int) 4];
        System.arraycopy(this.dq_abad, 0, outobj.dq_abad, 0, 4); 
        outobj.dq_hip = new float[(int) 4];
        System.arraycopy(this.dq_hip, 0, outobj.dq_hip, 0, 4); 
        outobj.dq_knee = new float[(int) 4];
        System.arraycopy(this.dq_knee, 0, outobj.dq_knee, 0, 4); 
        outobj.tau_abad = new float[(int) 4];
        System.arraycopy(this.tau_abad, 0, outobj.tau_abad, 0, 4); 
        outobj.tau_hip = new float[(int) 4];
        System.arraycopy(this.tau_hip, 0, outobj.tau_hip, 0, 4); 
        outobj.tau_knee = new float[(int) 4];
        System.arraycopy(this.tau_knee, 0, outobj.tau_knee, 0, 4); 
        outobj.tau_des_abad = new float[(int) 4];
        System.arraycopy(this.tau_des_abad, 0, outobj.tau_des_abad, 0, 4); 
        outobj.tau_des_hip = new float[(int) 4];
        System.arraycopy(this.tau_des_hip, 0, outobj.tau_des_hip, 0, 4); 
        outobj.tau_des_knee = new float[(int) 4];
        System.arraycopy(this.tau_des_knee, 0, outobj.tau_des_knee, 0, 4); 
        outobj.loop_count_ti = new short[(int) 4];
        System.arraycopy(this.loop_count_ti, 0, outobj.loop_count_ti, 0, 4); 
        outobj.ethercat_count_ti = new short[(int) 4];
        System.arraycopy(this.ethercat_count_ti, 0, outobj.ethercat_count_ti, 0, 4); 
        outobj.microtime_ti = new short[(int) 4];
        System.arraycopy(this.microtime_ti, 0, outobj.microtime_ti, 0, 4); 
        return outobj;
    }
 
}

