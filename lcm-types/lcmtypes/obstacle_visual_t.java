/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class obstacle_visual_t implements lcm.lcm.LCMEncodable
{
    public int num_obs;
    public double location[][];
    public double sigma;
    public double height;
    public double mesh_center_pos[];
 
    public obstacle_visual_t()
    {
        location = new double[100][3];
        mesh_center_pos = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf74f22add035377dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.obstacle_visual_t.class))
            return 0L;
 
        classes.add(lcmtypes.obstacle_visual_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.num_obs); 
 
        for (int a = 0; a < 100; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeDouble(this.location[a][b]); 
            }
        }
 
        outs.writeDouble(this.sigma); 
 
        outs.writeDouble(this.height); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.mesh_center_pos[a]); 
        }
 
    }
 
    public obstacle_visual_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public obstacle_visual_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.obstacle_visual_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.obstacle_visual_t o = new lcmtypes.obstacle_visual_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_obs = ins.readInt();
 
        this.location = new double[(int) 100][(int) 3];
        for (int a = 0; a < 100; a++) {
            for (int b = 0; b < 3; b++) {
                this.location[a][b] = ins.readDouble();
            }
        }
 
        this.sigma = ins.readDouble();
 
        this.height = ins.readDouble();
 
        this.mesh_center_pos = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.mesh_center_pos[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.obstacle_visual_t copy()
    {
        lcmtypes.obstacle_visual_t outobj = new lcmtypes.obstacle_visual_t();
        outobj.num_obs = this.num_obs;
 
        outobj.location = new double[(int) 100][(int) 3];
        for (int a = 0; a < 100; a++) {
            System.arraycopy(this.location[a], 0, outobj.location[a], 0, 3);        }
 
        outobj.sigma = this.sigma;
 
        outobj.height = this.height;
 
        outobj.mesh_center_pos = new double[(int) 3];
        System.arraycopy(this.mesh_center_pos, 0, outobj.mesh_center_pos, 0, 3); 
        return outobj;
    }
 
}

